#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'CmdSerialMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 5

# The Active Message type associated with this message.
AM_TYPE = 137

class CmdSerialMsg(tinyos.message.Message.Message):
    # Create a new CmdSerialMsg of size 5.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=5):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <CmdSerialMsg> \n"
        try:
            s += "  [cmd=0x%x]\n" % (self.get_cmd())
        except:
            pass
        try:
            s += "  [channel=0x%x]\n" % (self.get_channel())
        except:
            pass
        try:
            s += "  [dst=0x%x]\n" % (self.get_dst())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: cmd
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'cmd' is signed (False).
    #
    def isSigned_cmd(self):
        return False
    
    #
    # Return whether the field 'cmd' is an array (False).
    #
    def isArray_cmd(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'cmd'
    #
    def offset_cmd(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'cmd'
    #
    def offsetBits_cmd(self):
        return 0
    
    #
    # Return the value (as a int) of the field 'cmd'
    #
    def get_cmd(self):
        return self.getUIntElement(self.offsetBits_cmd(), 16, 1)
    
    #
    # Set the value of the field 'cmd'
    #
    def set_cmd(self, value):
        self.setUIntElement(self.offsetBits_cmd(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'cmd'
    #
    def size_cmd(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'cmd'
    #
    def sizeBits_cmd(self):
        return 16
    
    #
    # Accessor methods for field: channel
    #   Field type: short
    #   Offset (bits): 16
    #   Size (bits): 8
    #

    #
    # Return whether the field 'channel' is signed (False).
    #
    def isSigned_channel(self):
        return False
    
    #
    # Return whether the field 'channel' is an array (False).
    #
    def isArray_channel(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'channel'
    #
    def offset_channel(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'channel'
    #
    def offsetBits_channel(self):
        return 16
    
    #
    # Return the value (as a short) of the field 'channel'
    #
    def get_channel(self):
        return self.getUIntElement(self.offsetBits_channel(), 8, 1)
    
    #
    # Set the value of the field 'channel'
    #
    def set_channel(self, value):
        self.setUIntElement(self.offsetBits_channel(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'channel'
    #
    def size_channel(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'channel'
    #
    def sizeBits_channel(self):
        return 8
    
    #
    # Accessor methods for field: dst
    #   Field type: int
    #   Offset (bits): 24
    #   Size (bits): 16
    #

    #
    # Return whether the field 'dst' is signed (False).
    #
    def isSigned_dst(self):
        return False
    
    #
    # Return whether the field 'dst' is an array (False).
    #
    def isArray_dst(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'dst'
    #
    def offset_dst(self):
        return (24 / 8)
    
    #
    # Return the offset (in bits) of the field 'dst'
    #
    def offsetBits_dst(self):
        return 24
    
    #
    # Return the value (as a int) of the field 'dst'
    #
    def get_dst(self):
        return self.getUIntElement(self.offsetBits_dst(), 16, 1)
    
    #
    # Set the value of the field 'dst'
    #
    def set_dst(self, value):
        self.setUIntElement(self.offsetBits_dst(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'dst'
    #
    def size_dst(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'dst'
    #
    def sizeBits_dst(self):
        return 16
    
