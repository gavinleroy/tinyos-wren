#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'SerialStatusMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 23

# The Active Message type associated with this message.
AM_TYPE = 7

class SerialStatusMsg(tinyos.message.Message.Message):
    # Create a new SerialStatusMsg of size 23.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=23):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <SerialStatusMsg> \n"
        try:
            s += "  [src=0x%x]\n" % (self.get_src())
        except:
            pass
        try:
            s += "  [sensing=0x%x]\n" % (self.get_sensing())
        except:
            pass
        try:
            s += "  [localtime=0x%x]\n" % (self.get_localtime())
        except:
            pass
        try:
            s += "  [globaltime=0x%x]\n" % (self.get_globaltime())
        except:
            pass
        try:
            s += "  [buffersize=0x%x]\n" % (self.get_buffersize())
        except:
            pass
        try:
            s += "  [isSynced=0x%x]\n" % (self.get_isSynced())
        except:
            pass
        try:
            s += "  [reboots=0x%x]\n" % (self.get_reboots())
        except:
            pass
        try:
            s += "  [bat=0x%x]\n" % (self.get_bat())
        except:
            pass
        try:
            s += "  [isErased=0x%x]\n" % (self.get_isErased())
        except:
            pass
        try:
            s += "  [download=0x%x]\n" % (self.get_download())
        except:
            pass
        try:
            s += "  [channel=0x%x]\n" % (self.get_channel())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: src
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'src' is signed (False).
    #
    def isSigned_src(self):
        return False
    
    #
    # Return whether the field 'src' is an array (False).
    #
    def isArray_src(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'src'
    #
    def offset_src(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'src'
    #
    def offsetBits_src(self):
        return 0
    
    #
    # Return the value (as a int) of the field 'src'
    #
    def get_src(self):
        return self.getUIntElement(self.offsetBits_src(), 16, 1)
    
    #
    # Set the value of the field 'src'
    #
    def set_src(self, value):
        self.setUIntElement(self.offsetBits_src(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'src'
    #
    def size_src(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'src'
    #
    def sizeBits_src(self):
        return 16
    
    #
    # Accessor methods for field: sensing
    #   Field type: short
    #   Offset (bits): 16
    #   Size (bits): 8
    #

    #
    # Return whether the field 'sensing' is signed (False).
    #
    def isSigned_sensing(self):
        return False
    
    #
    # Return whether the field 'sensing' is an array (False).
    #
    def isArray_sensing(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'sensing'
    #
    def offset_sensing(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'sensing'
    #
    def offsetBits_sensing(self):
        return 16
    
    #
    # Return the value (as a short) of the field 'sensing'
    #
    def get_sensing(self):
        return self.getUIntElement(self.offsetBits_sensing(), 8, 1)
    
    #
    # Set the value of the field 'sensing'
    #
    def set_sensing(self, value):
        self.setUIntElement(self.offsetBits_sensing(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'sensing'
    #
    def size_sensing(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'sensing'
    #
    def sizeBits_sensing(self):
        return 8
    
    #
    # Accessor methods for field: localtime
    #   Field type: long
    #   Offset (bits): 24
    #   Size (bits): 32
    #

    #
    # Return whether the field 'localtime' is signed (False).
    #
    def isSigned_localtime(self):
        return False
    
    #
    # Return whether the field 'localtime' is an array (False).
    #
    def isArray_localtime(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'localtime'
    #
    def offset_localtime(self):
        return (24 / 8)
    
    #
    # Return the offset (in bits) of the field 'localtime'
    #
    def offsetBits_localtime(self):
        return 24
    
    #
    # Return the value (as a long) of the field 'localtime'
    #
    def get_localtime(self):
        return self.getUIntElement(self.offsetBits_localtime(), 32, 1)
    
    #
    # Set the value of the field 'localtime'
    #
    def set_localtime(self, value):
        self.setUIntElement(self.offsetBits_localtime(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'localtime'
    #
    def size_localtime(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'localtime'
    #
    def sizeBits_localtime(self):
        return 32
    
    #
    # Accessor methods for field: globaltime
    #   Field type: long
    #   Offset (bits): 56
    #   Size (bits): 32
    #

    #
    # Return whether the field 'globaltime' is signed (False).
    #
    def isSigned_globaltime(self):
        return False
    
    #
    # Return whether the field 'globaltime' is an array (False).
    #
    def isArray_globaltime(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'globaltime'
    #
    def offset_globaltime(self):
        return (56 / 8)
    
    #
    # Return the offset (in bits) of the field 'globaltime'
    #
    def offsetBits_globaltime(self):
        return 56
    
    #
    # Return the value (as a long) of the field 'globaltime'
    #
    def get_globaltime(self):
        return self.getUIntElement(self.offsetBits_globaltime(), 32, 1)
    
    #
    # Set the value of the field 'globaltime'
    #
    def set_globaltime(self, value):
        self.setUIntElement(self.offsetBits_globaltime(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'globaltime'
    #
    def size_globaltime(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'globaltime'
    #
    def sizeBits_globaltime(self):
        return 32
    
    #
    # Accessor methods for field: buffersize
    #   Field type: long
    #   Offset (bits): 88
    #   Size (bits): 32
    #

    #
    # Return whether the field 'buffersize' is signed (False).
    #
    def isSigned_buffersize(self):
        return False
    
    #
    # Return whether the field 'buffersize' is an array (False).
    #
    def isArray_buffersize(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'buffersize'
    #
    def offset_buffersize(self):
        return (88 / 8)
    
    #
    # Return the offset (in bits) of the field 'buffersize'
    #
    def offsetBits_buffersize(self):
        return 88
    
    #
    # Return the value (as a long) of the field 'buffersize'
    #
    def get_buffersize(self):
        return self.getUIntElement(self.offsetBits_buffersize(), 32, 1)
    
    #
    # Set the value of the field 'buffersize'
    #
    def set_buffersize(self, value):
        self.setUIntElement(self.offsetBits_buffersize(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'buffersize'
    #
    def size_buffersize(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'buffersize'
    #
    def sizeBits_buffersize(self):
        return 32
    
    #
    # Accessor methods for field: isSynced
    #   Field type: short
    #   Offset (bits): 120
    #   Size (bits): 8
    #

    #
    # Return whether the field 'isSynced' is signed (False).
    #
    def isSigned_isSynced(self):
        return False
    
    #
    # Return whether the field 'isSynced' is an array (False).
    #
    def isArray_isSynced(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'isSynced'
    #
    def offset_isSynced(self):
        return (120 / 8)
    
    #
    # Return the offset (in bits) of the field 'isSynced'
    #
    def offsetBits_isSynced(self):
        return 120
    
    #
    # Return the value (as a short) of the field 'isSynced'
    #
    def get_isSynced(self):
        return self.getUIntElement(self.offsetBits_isSynced(), 8, 1)
    
    #
    # Set the value of the field 'isSynced'
    #
    def set_isSynced(self, value):
        self.setUIntElement(self.offsetBits_isSynced(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'isSynced'
    #
    def size_isSynced(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'isSynced'
    #
    def sizeBits_isSynced(self):
        return 8
    
    #
    # Accessor methods for field: reboots
    #   Field type: int
    #   Offset (bits): 128
    #   Size (bits): 16
    #

    #
    # Return whether the field 'reboots' is signed (False).
    #
    def isSigned_reboots(self):
        return False
    
    #
    # Return whether the field 'reboots' is an array (False).
    #
    def isArray_reboots(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'reboots'
    #
    def offset_reboots(self):
        return (128 / 8)
    
    #
    # Return the offset (in bits) of the field 'reboots'
    #
    def offsetBits_reboots(self):
        return 128
    
    #
    # Return the value (as a int) of the field 'reboots'
    #
    def get_reboots(self):
        return self.getUIntElement(self.offsetBits_reboots(), 16, 1)
    
    #
    # Set the value of the field 'reboots'
    #
    def set_reboots(self, value):
        self.setUIntElement(self.offsetBits_reboots(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'reboots'
    #
    def size_reboots(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'reboots'
    #
    def sizeBits_reboots(self):
        return 16
    
    #
    # Accessor methods for field: bat
    #   Field type: int
    #   Offset (bits): 144
    #   Size (bits): 16
    #

    #
    # Return whether the field 'bat' is signed (False).
    #
    def isSigned_bat(self):
        return False
    
    #
    # Return whether the field 'bat' is an array (False).
    #
    def isArray_bat(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'bat'
    #
    def offset_bat(self):
        return (144 / 8)
    
    #
    # Return the offset (in bits) of the field 'bat'
    #
    def offsetBits_bat(self):
        return 144
    
    #
    # Return the value (as a int) of the field 'bat'
    #
    def get_bat(self):
        return self.getUIntElement(self.offsetBits_bat(), 16, 1)
    
    #
    # Set the value of the field 'bat'
    #
    def set_bat(self, value):
        self.setUIntElement(self.offsetBits_bat(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'bat'
    #
    def size_bat(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'bat'
    #
    def sizeBits_bat(self):
        return 16
    
    #
    # Accessor methods for field: isErased
    #   Field type: short
    #   Offset (bits): 160
    #   Size (bits): 8
    #

    #
    # Return whether the field 'isErased' is signed (False).
    #
    def isSigned_isErased(self):
        return False
    
    #
    # Return whether the field 'isErased' is an array (False).
    #
    def isArray_isErased(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'isErased'
    #
    def offset_isErased(self):
        return (160 / 8)
    
    #
    # Return the offset (in bits) of the field 'isErased'
    #
    def offsetBits_isErased(self):
        return 160
    
    #
    # Return the value (as a short) of the field 'isErased'
    #
    def get_isErased(self):
        return self.getUIntElement(self.offsetBits_isErased(), 8, 1)
    
    #
    # Set the value of the field 'isErased'
    #
    def set_isErased(self, value):
        self.setUIntElement(self.offsetBits_isErased(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'isErased'
    #
    def size_isErased(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'isErased'
    #
    def sizeBits_isErased(self):
        return 8
    
    #
    # Accessor methods for field: download
    #   Field type: short
    #   Offset (bits): 168
    #   Size (bits): 8
    #

    #
    # Return whether the field 'download' is signed (False).
    #
    def isSigned_download(self):
        return False
    
    #
    # Return whether the field 'download' is an array (False).
    #
    def isArray_download(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'download'
    #
    def offset_download(self):
        return (168 / 8)
    
    #
    # Return the offset (in bits) of the field 'download'
    #
    def offsetBits_download(self):
        return 168
    
    #
    # Return the value (as a short) of the field 'download'
    #
    def get_download(self):
        return self.getUIntElement(self.offsetBits_download(), 8, 1)
    
    #
    # Set the value of the field 'download'
    #
    def set_download(self, value):
        self.setUIntElement(self.offsetBits_download(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'download'
    #
    def size_download(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'download'
    #
    def sizeBits_download(self):
        return 8
    
    #
    # Accessor methods for field: channel
    #   Field type: short
    #   Offset (bits): 176
    #   Size (bits): 8
    #

    #
    # Return whether the field 'channel' is signed (False).
    #
    def isSigned_channel(self):
        return False
    
    #
    # Return whether the field 'channel' is an array (False).
    #
    def isArray_channel(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'channel'
    #
    def offset_channel(self):
        return (176 / 8)
    
    #
    # Return the offset (in bits) of the field 'channel'
    #
    def offsetBits_channel(self):
        return 176
    
    #
    # Return the value (as a short) of the field 'channel'
    #
    def get_channel(self):
        return self.getUIntElement(self.offsetBits_channel(), 8, 1)
    
    #
    # Set the value of the field 'channel'
    #
    def set_channel(self, value):
        self.setUIntElement(self.offsetBits_channel(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'channel'
    #
    def size_channel(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'channel'
    #
    def sizeBits_channel(self):
        return 8
    
